{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to Intro to Git! This guide will help you learn how to use Git by installing the appropriate version and pushing your code to the repository. Git is a version control system used for software development and GitHub is an internet hosting service that provides access control, bug tracking, task management, and other features for Git projects.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is targeted towards the following Users:</p> <ul> <li>Beginner developers who are using Git and are using Git to push their code into the repository.</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>Before proceeding, ensure that you have the following requirements installed:</p> <ul> <li>GitHub Account</li> <li>Visual Studio Code</li> </ul>"},{"location":"#procedure-overview","title":"Procedure Overview","text":"<p>The main section of the documentation are summarized below.</p> <ul> <li>Git Basics</li> <li>Pushing Code With Git</li> <li>Working with Branches</li> <li>Versions Control</li> <li>Trouble Shooting</li> </ul>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Throughout the documentation, we will use message blocks to inform you of relevant information. Each possible message block, from most important to least important:</p> <p>Warning</p> <p>Specifies content that must read before proceeding.</p> <p>Info</p> <p>Indicates additional important information and tips.</p> <p>Success</p> <p>Indicates what success looks like.</p>"},{"location":"#installing-git","title":"Installing Git","text":"<p>Here are some examples of how to install Git using MacOS and Windows</p>"},{"location":"#macos-users","title":"MacOS Users","text":"<p>First, install Homebrew if you havent already installed. Click here</p> <p>Then, run :</p> <pre><code>brew install git \n</code></pre> <p>inside yout terminal</p>"},{"location":"#windows-users","title":"Windows Users","text":"<p>For Windows users, vist the following Web page and download Git: Click here</p> <p>and click the 64-bit for Windows setup.</p> <p></p> <p>1. Click, yes if the following pop-up window pops up</p> <p></p> <p>2. Choose next for all the prompt </p> <p>Choose next for all the prompt</p> <p></p> <p>3. Click the dropdown button to select Visual Studio Code. Otherwize, select the default setting which is Vim</p> <p></p> <p>4. Select Git from the command line and also from third party software and keep it that way. </p> <p>5. Use bundled OpenSSH and Use the OpenSSL library should be the defaults. Keep it that way.</p> <p></p> <p></p> <p>6. Select Checkout Windows-style should be default. Keep it that way.</p> <p></p> <p>7. Choose the terminal emulator: Leave it at the default which is Use MinTTY</p> <p></p> <p>8. Select the default git pull option checked</p> <p></p> <p>9. Select the default Git Credential Manager Core.</p> <p></p> <p>10. You should be done installing Git. To check if Git is installed, go to your start menu and typeinside the terminal. You should see the Git icon logo which is shown in the screenshot.</p> <p></p> <pre><code>Git bash\n</code></pre> <p>11. Inside the terminal type this command, this will display the current version of Git</p> <p></p> <pre><code>git --version\n</code></pre> <p>Once you have the latest version of Git, you are ready to learn the Git Basics commands.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned the following:</p> <ul> <li> Learn what is Git about</li> <li> How to install Git into your environment</li> </ul> <p>Congratulations! \ud83c\udf89 Go on to the next section to learn more about how to use Git Basic commands. Click the link below:</p> <p>Git Basics</p>"},{"location":"Gitbasics/","title":"Git Basics","text":""},{"location":"Gitbasics/#create-a-local-repository","title":"Create a local repository","text":"<p>Follow these steps below to create a local repository:</p> <p>1. Create a folder for our repository</p> <p>In the terminal, navigate to a directory of your choice (e.g., your desktop). In your terminal, create the folder by running the following:</p> <pre><code>mkdir my_new_directory\n</code></pre> <p>This command creates a new directory named <code>my_new_directory</code>.</p> <p>2. Navigate into the new folder</p> <pre><code>cd my_new_directory\n</code></pre> <p>This command moves into the newly created directory. Your terminal should display <code>my_new_directory</code>, indicating that you are now inside the new folder. Open the folder in VS Code.</p>"},{"location":"Gitbasics/#initialize-a-git-repository-with-git-init","title":"Initialize a Git Repository with <code>git init</code>","text":"<p>Now that we're\u00a0in the directory\u00a0where we want Git to watch for changes (adding, removing, and editing files), we next need to\u00a0initialize\u00a0this directory as a Git repo.</p> <p>In the terminal type\u00a0<code>git init</code>. It should look something like this:</p> <pre><code>$ git init\nInitialized empty Git repository in C:Users/yourUserName/my_new_directory/.git/\n</code></pre> <p>The message indicates that Git is now tracking the new directory, and it has created a hidden subfolder called <code>.git</code>. This subfolder contains crucial data, such as the commit history. If you really mess things up and want to start from scratch with Git, you can delete the <code>.git</code> folder and all its contents using <code>rm -rf .git</code> command. This will restore the directory to a regular folder that's no longer linked to Git.</p> <p>Warning</p> <p>Make sure to be aware of which folder you are currently in within your terminal. It is important to avoid accidentally running the init command in your home directory or desktop. Only type <code>git init</code> within the specific directory that you want <code>git</code> to track. Forgetting to do so may cause Git to track every file on your computer, which is not desired.</p>"},{"location":"Gitbasics/#check-the-status-of-a-repository-with-git-status","title":"Check the Status of a Repository with <code>git status</code>","text":"<pre><code>git status\n</code></pre> <p>This command tells us about the status of a repository and the staging area. It displays which files that aren't being tracked by Git and which changes have or haven't been staged.</p> <p>Since there are no files that are being added yet, we'll see:</p> <pre><code>On branch main (or maybe it'll say master)\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n</code></pre> <p>Note</p> <p>It is important to note that <code>main</code> and <code>master</code> are both names for the core branch of a repository. While a repository can have many branches, it will always have only one primary branch. Previously, this branch was typically called <code>master</code>, but going forward it will be called <code>main</code>. As you work with both new and old repositories, you may encounter both names.</p> <p>Let's create and add content to a new README.md file in the <code>my_new_directory</code> directory by following the steps below:</p> <p>1. Create a README.md file</p> <pre><code>touch README.md\n</code></pre> <p>This command creates a new file named <code>README.md</code>. Alternatively, you can create a new README.md file in VS Code by choosing <code>File -&gt; New File</code>.</p> <p>2. Add content to the README.md file</p> <p>A README.md file describes the project. To add content to the README.md file, run the following command:</p> <pre><code>echo \"This is my readme file\" &gt;&gt; README.md\n</code></pre> <p>This command adds the content <code>\"This is my readme file\"</code> to the README.md file. Alternatively, you can directly type in content for the README.md file in VS Code. If you have the README.md file open in VS Code, the new text will appear.</p> <p>Now if we type <code>git status</code> again, git will show us what our current repository looks like and what changes it sees.</p> <pre><code>$ git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n  README.md\n\nnothing added to commit but untracked files present (use `git add` to track)\n</code></pre> <p>Git acknowledges the existence of the file <code>README.md</code>, but it is not currently monitoring it. Git is not interacting with the file, nor is the file interacting with Git...at least not yet.</p> <p>Tip</p> <p><code>git status</code> is useful whenever you want to check the status of your Git repository.</p>"},{"location":"Gitbasics/#keep-track-of-file-changes-with-git-add","title":"Keep track of File Changes with <code>git add</code>","text":"<p>The file in our repository is not being tracked by Git yet. To ensure that the file is considered part of our project, we need to inform Git about all the files we want it to keep track of by typing:</p> <pre><code>git add README.md\n</code></pre> <p>This command adds our new <code>README.md</code> file to the repository. To check the status of our repository, type <code>git status</code>.</p> <pre><code>$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\nnew file:   README.md\n</code></pre> <p>The README.md file has now been staged and Git is ready to keep track of all the changes in the README.md file.</p> <p>Tip</p> <p>You can also use the <code>git add .</code> command to add all the files that have been changed since the last commit.</p>"},{"location":"Gitbasics/#create-a-commit-and-apply-a-commit-message-with-git-commit","title":"Create a Commit and Apply a Commit Message with <code>git commit</code>","text":"<p>Now that we have staged the README.md file, let's create our first commit by typing:</p> <pre><code>git commit -m \"initial commit\"\n</code></pre> <p>This command will capture and create a \"snapshot\" of the changes in the commit. Whenever we make a commit, we use the <code>-m</code> flag to specify a commit message, in this case <code>\"initial commit\"</code>.</p> <p>Important</p> <p>Anytime we make a commit, we should provide a commit message using the <code>-m</code> flag.</p> <pre><code>$ git commit -m \"initial commit\"\n\n[main (root-commit) e55477d] initial commit\n 1 file changed, 1 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n</code></pre> <p>Git has created a new version of our repository. In the Terminal, we see that there was one file changed which was our README.md file with one insertion which was the <code>\"This is my readme file\"</code> content we added to earlier.</p> <p>If we run the <code>git status</code> command now, we should see that it is at a \"clean state\".</p> <pre><code>$ git status\nOn branch main\nnothing to commit, working tree clean\n</code></pre> <p>We see that our <code>main</code> (or maybe <code>master</code> on yours) branch has nothing to commit and is up to date.</p>"},{"location":"Gitbasics/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned the following:</p> <ul> <li> Make a new Git repository out of a directory using\u00a0<code>git init</code></li> <li> Check the status of our repo using\u00a0<code>git status</code></li> <li> Track and stage files that have been changed using\u00a0<code>git add &lt;filename or path&gt;</code></li> <li> Commit (save) changes with an explanatory message using\u00a0<code>git commit -m \"Any message\"</code></li> </ul> <p>Congratulations! \ud83c\udf89 Go on to the next section to learn more about how to push code with Git. Click on the link below:</p> <p>Pushing Code With Git</p>"},{"location":"Glossary/","title":"Glossary","text":"Terms Definition Git A software that lets you track changes you make to your computer files over time GitHub A cloud-hosting service that allows you to store files remotely and work collaboratively on projects Local Repository A Git repository that resides on your computer Main (or Master) The default branch name when the initial branch is created Remote Repository A repository hosted on a remote server that allows developers to collaborate on a project if the repository is public Working directory Your project folder on your computer Commands Description <code>cd</code> Change directory <code>echo</code> A Linux command that prints a string of text in the command-line <code>git add &lt;filename or path&gt;</code> Adds a new or changed file to the staging area <code>git commit -m \"A message\"</code> Saves changes to the local repository with an explanatory message <code>git init</code> Initialize a new local Git repository <code>git push</code> Uploads local repository content to a remote repository <code>git remote add origin git@github.com:username/example_repo.git</code> Creates a new remote called <code>origin</code> located at the URL <code>git@github.com:username/example_repo.git</code>. <code>origin</code> is a standard convention used as a shorthand name for the repository's URL <code>git@github.com:username/example_repo.git</code> <code>git status</code> Displays the current state of the working directory and staging area. Any staged/unstaged changes or tracked/untracked files will be shown <code>git --version</code> Checks the current Git version installed on your device <code>mkdir &lt;directory_name here&gt;</code> Creates new directories or folder in a file system <code>touch &lt;filename here&gt;</code> Creates new empty files in a file system"},{"location":"Pushingcodewithgit/","title":"Overview","text":"<p>Once you have created your code and you are happy with it, you can push the code to the remote repository.</p>"},{"location":"Pushingcodewithgit/#learning-outcome","title":"Learning Outcome","text":"<ul> <li>How to create a remote repository.</li> <li>How to link your code to the remote repository with your local repository.</li> <li>How to push your code to the remote repository.</li> </ul>"},{"location":"Pushingcodewithgit/#create-a-remote-repository-on-github","title":"Create a Remote Repository on GitHub","text":"<ol> <li>Go to your GitHub Account.</li> <li>Click the <code>\"+\"</code> button on the top right of your profile picture and click \"New Repository\".</li> <li>Enter a name for your remote repository.</li> <li>Click public or private, either one is fine.</li> <li>Click the green \"Create Repository\" button.</li> </ol> <p>Tip</p> <p>you should name your remote repository with a unique name becuase it will be easier to find the repository on Github if you have multiple projects that is going on. </p>"},{"location":"Pushingcodewithgit/#connect-the-local-repository-to-the-repmote-repository","title":"Connect the Local Repository to the Repmote Repository","text":"<p>Type the following commands inside the terminal but don't run it just yet.</p> <pre><code>git remote add origin https://github.com/&lt;Your_username&gt;/&lt;your_repository_name.git&gt;\n</code></pre> <p><code>git remote</code> is a command that will list all the remotes that is available on your Git repository that is running behind the scene.</p> <p>Note</p> <p>If you run the command <code>git remote</code> without the <code>add origin</code> follow by the url in your terminal nothing happens. This is because you have not set your remote repository as the remote to your local repository. </p> <p>To set the remote type, enter <code>git remote add origin</code> followed by a space and paste in the URL that you see above.</p> <p>Important</p> <p>Replace <code>&lt;Your_username&gt;</code> and <code>&lt;your_repository_name.git&gt;</code> name with your username and repository name that you assigned.</p> <p>Ensure that you have replaced the necessary information in the GitHub URL before running the command.</p> <p>Now, you can run the <code>git remote add origin</code> command.</p>"},{"location":"Pushingcodewithgit/#sending-your-code-to-the-remote-repository","title":"Sending Your Code to the Remote Repository","text":"<p>Now that you have added a remote repository, you can send your latest code by using <code>git push</code>.</p> <p><code>git push</code> is a command that takes two arguments:</p>"},{"location":"Pushingcodewithgit/#1-the-first-arguments-is-the-name-of-the-remote-repository","title":"1. the first arguments is the name of the remote repository.","text":""},{"location":"Pushingcodewithgit/#2-the-second-argument-is-the-branch-name-of-the-remote-repository","title":"2. the second argument is the branch name of the remote repository.","text":"<p><code>origin</code> is just an alias name or \"short name\" that refers to the repository name.</p> <p>Note</p> <p>You can change <code>origin</code> to any name that you want to be. For example, we changed <code>origin</code> to <code>apple</code>: <pre><code>git remote add apple https://github.com/&lt;Your_username&gt;/&lt;your_repository_name.git&gt;\ngit push -u apple main\n</code></pre></p> <p>To push your code to the remote repository to GitHub, run this command.</p> <pre><code>git push -u origin main\n</code></pre> <p>Note</p> <p>When you push your code up to the newly added remote repository, using the <code>-u</code> will tell Git to save the repository as the default push destination for your current branch. Meaning everytime you push your code to the main or master branch you will only need to run <code>git push</code> instead of <code>git push origin main</code> (or <code>git push origin master</code>).</p>"},{"location":"Pushingcodewithgit/#conclusion","title":"Conclusion","text":"<p>Congratulation, you have successfully uploaded your code to the Remote Repository with git.</p> <ul> <li> learned what is remote repository is.</li> <li> Learned how to use <code>git push</code> and pushed to the remote repository.</li> </ul>"},{"location":"TroubleShooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action <code>fatal: Authentication failed for [repository URL]</code> This error message indicates that Git was unable to authenticate with the remote repository. Double-check your login information and try again. <code>fatal: not a git repository</code> This error message means that you tried to run a Git command in a directory that is not a Git repository or a subdirectory of a Git repository. In other words, Git does not recognize the directory you are in as a place where it can track changes to files. Double-check that you are in the correct directory or subdirectory of a Git repository. You can verify if a directory is a Git repository by checking for the presence of a \".git\" folder within the directory. <code>fatal: remote origin already exists</code> This error message means that you are trying to add a remote repository with a name \"origin\" which already exists in your Git repository. Use a different name when adding the remote repository. Instead of using the default name \"origin\", you can use any other name of your choice. For example, you can use \"myrepo\" instead of \"origin\" when adding the remote repository. <code>fatal: git checkout: updating paths is incompatible with switching branches</code> This error occurs when you try to switch branches while having uncommitted changes in your working directory. You can resolve this by committing your changes or stashing them. <code>error: Your local changes to the following files would be overwritten by merge:[file names]</code> This error message indicates that you have made changes to one or more files that conflict with changes made in the remote repository. Git is preventing the <code>git pull</code> command from overwriting your local changes. Commit your local changes using the <code>git commit</code> command before running the <code>git pull</code> command."}]}